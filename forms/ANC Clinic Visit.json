{
  "name" : "ANC Clinic Visit",
  "uuid" : "991876fd-3297-4e5b-b8f8-2b02ffed4bb5",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "b193c937-752c-4735-ac61-aca5f68b020e",
    "name" : "Anthropometry",
    "displayOrder" : 2.0,
    "display" : "Anthropometry",
    "formElements" : [ {
      "name" : "Height",
      "uuid" : "4df519e3-d3bd-4d10-a7fa-4397c66f4daf",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Height",
        "uuid" : "23bcad9f-ec16-46ec-92f5-e144411e5dec"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.latestValueInPreviousEncounters('Height').is.notDefined;\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Weight",
      "uuid" : "4de79ca4-1a2e-4421-a873-1e9bbf4554c2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Weight",
        "uuid" : "8d947379-7a1d-48b2-8760-88fff6add987"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "BMI",
      "uuid" : "ff7d82c9-3e31-495c-b43c-b5802ab0c702",
      "keyValues" : [ {
        "key" : "editable",
        "value" : false
      } ],
      "concept" : {
        "name" : "BMI",
        "uuid" : "a205563d-0ac2-4955-93ac-e2e7adebb56e"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    \nlet height = programEncounter.findLatestObservationInEntireEnrolment(\"Height\", programEncounter);\nlet weight = programEncounter.findObservation(\"Weight\");\n        height = height && height.getValue();\n        weight = weight && weight.getValue();\n        console.log('height',height);\n        console.log('weight',weight);\n        let value = '';\n        if (_.isFinite(weight) && _.isFinite(height)) {\n         value = ruleServiceLibraryInterfaceForSharingModules.common.calculateBMI(weight, height);\n       }\n       \n        console.log('value',value);\n        \n    return new imports.rulesConfig.FormElementStatus(formElement.uuid, true, value);\n  };",
      "mandatory" : false
    }]
  }, {
    "uuid" : "c76c6300-5f5e-4646-abfd-800984c653bd",
    "name" : "Basic details",
    "displayOrder" : 3.0,
    "display" : "Basic details",
    "formElements" : [ {
      "name" : "Blood Pressure (systolic)",
      "uuid" : "26f40952-661e-4dc6-889c-eb15224a1cb1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Blood Pressure (systolic)",
        "uuid" : "6874d48e-8c2f-4009-992c-1d3ca1678cc6"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Blood Pressure (Diastolic)",
      "uuid" : "b273461c-c343-44d4-b11c-ee056a6b4d63",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Blood Pressure (Diastolic)",
        "uuid" : "da871f6c-cef0-4191-b307-6751b31ac9ec"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Is mosquito net given?",
      "uuid" : "c764957e-8296-4ceb-9c6e-6c33f36e3caa",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Is mosquito net given",
        "uuid" : "b7be4ddc-14ee-4caf-ab38-e1c87d088688"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.latestValueInPreviousEncounters('Is mosquito net given').containsAnswerConceptNameOtherThan('Yes').or.when.latestValueInPreviousEncounters('Is mosquito net given').is.notDefined;\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Is Safe delivery kit given?",
      "uuid" : "e2b86018-e5cb-40e3-9476-94192c963fe6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Is safe delivery kit given",
        "uuid" : "04eecc2b-93eb-49d4-83a4-6629442711ea"
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.latestValueInPreviousEncounters('Is safe delivery kit given').containsAnswerConceptNameOtherThan('Yes').or.when.latestValueInPreviousEncounters('Is safe delivery kit given').is.notDefined;\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : false
    } ]
  }, {
    "uuid" : "05a197d2-cba6-4134-b21f-a0b9f394e467",
    "name" : "History and Physical examination",
    "displayOrder" : 4.0,
    "display" : "History and Physical examination",
    "formElements" : [ {
      "name" : "New complaint",
      "uuid" : "94718f63-3e90-4262-827d-ac98bb2e1d31",
      "keyValues" : [ ],
      "concept" : {
        "name" : "New complaint",
        "uuid" : "74599453-6fbd-4f8d-bf7f-34faa3c10eb9"
      },
      "displayOrder" : 1.0,
      "type" : "MultiSelect",
      "mandatory" : true
    }, {
      "name" : "Specify the other complaint",
      "uuid" : "5269ebed-3dd8-4478-a007-90a56f7a95ea",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other complaint",
        "uuid" : "dc0c10ca-c151-4c5c-aedc-2b8040dbea52"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\nconst programEncounter = params.entity;\nconst formElement = params.formElement;\n\nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\nstatusBuilder.show().when.valueInEncounter('New complaint').containsAnswerConceptName('Other');\n\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Oedema",
      "uuid" : "e9048c62-6d40-479f-826c-b0d92920b482",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Oedema",
        "uuid" : "95dd3094-6c99-4622-8614-bf5d33a509e4"
      },
      "displayOrder" : 4.0,
      "type" : "MultiSelect",
      "mandatory" : true
    }, {
      "name" : "Abdomen check",
      "uuid" : "da2705a2-a94d-4a66-83fc-7caaf2ee2bc8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Abdomen check",
        "uuid" : "2a15dc0b-d6a0-4670-b109-4013789cb403"
      },
      "displayOrder" : 5.0,
      "type" : "MultiSelect",
      "mandatory" : true
    },{
      "name" : "Fundle Height",
      "uuid" : "de9e0df0-bc70-43aa-be6a-31084cef25a2",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Fundle Height",
        "uuid" : "f5ff8848-798a-4b0f-bcaf-33f2d4528f37"
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Position",
      "uuid" : "25755226-6271-44c9-a0a2-ab1da3cde59c",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Position",
        "uuid" : "69a95145-505b-497a-9fc9-61fcc5d2ff59"
      },
      "displayOrder" : 8.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "FHS",
      "uuid" : "ffc85ccf-a291-4f48-944b-d74d1eed4a57",
      "keyValues" : [ ],
      "concept" : {
        "name" : "FHS",
        "uuid" : "7c6d3fc6-6a9f-4b44-beef-8c2200da5281"
      },
      "displayOrder" : 9.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "FHS number",
      "uuid" : "df07b83c-32e4-4183-8996-e6eac4f61cc0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "FHS number",
        "uuid" : "532ae011-4380-4ff5-b7c7-7d163e396221"
      },
      "displayOrder" : 10.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\nconst programEncounter = params.entity;\nconst formElement = params.formElement;\n\nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\nstatusBuilder.show().when.valueInEncounter('FHS').containsAnswerConceptName('Audible');\n\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Foetus movement",
      "uuid" : "96a1938a-c0e2-4dd5-b563-03a2e7e57496",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Foetus movement",
        "uuid" : "31651632-0acb-4ee5-a0f3-1628bbed456c"
      },
      "displayOrder" : 11.0,
      "type" : "SingleSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    //const lmpDate = programEncounter.programEnrolment.getObservationValue('Last menstrual period');\n    //const value =  imports.moment(today).diff(lmpDate, 'months');\n    const value = \nruleServiceLibraryInterfaceForSharingModules.motherCalculations.currentTrimester(programEncounter.programEnrolment, programEncounter.encounterDateTime);\n   \nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\nstatusBuilder.show().whenItem(value).greaterThanOrEqualTo(2);\n\n  return statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Breast examination",
      "uuid" : "60c0fb96-39ab-4fbb-807e-8a44343d2870",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Breast examination",
        "uuid" : "7259b0fa-c8d1-4e04-8d13-7dbc05f0169b"
      },
      "displayOrder" : 12.0,
      "type" : "MultiSelect",
      "rule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const formElement = params.formElement;\n    //const lmpDate = programEncounter.programEnrolment.getObservationValue('Last menstrual period');\n    //const value =  imports.moment(today).diff(lmpDate, 'months');\n    const value = \nruleServiceLibraryInterfaceForSharingModules.motherCalculations.currentTrimester(programEncounter.programEnrolment, programEncounter.encounterDateTime);\n   \nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\nstatusBuilder.show().whenItem(value).equals(3);\n\n  return statusBuilder.build();\n};",
      "mandatory" : true
    } ]
  }, {
    "uuid" : "40835036-76b9-4d86-adbb-b3e9ed1db071",
    "name" : "Lab investigations",
    "displayOrder" : 5.0,
    "display" : "Lab investigations",
    "formElements" : [ {
      "name" : "Urine Albumin",
      "uuid" : "c4aaa7eb-b636-4d04-8c5d-4a9a909ccf3f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Urine Albumin",
        "uuid" : "78fcebd3-17e5-4621-89be-c580fbf13168"
      },
      "displayOrder" : 12.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Urine sugar",
      "uuid" : "fc79113b-e33d-41f9-9346-91e8a4871687",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Urine sugar",
        "uuid" : "55ae9e7a-f6ff-4c0b-861c-fd29b6c5c646"
      },
      "displayOrder" : 13.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Haemoglobin",
      "uuid" : "c444a47c-d50b-456f-beee-8a25a5ba2f21",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Hb",
        "uuid" : "a240115e-47a2-4244-8f74-d13d20f087df"
      },
      "displayOrder" : 14.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Malaria parasite",
      "uuid" : "c4027199-c54c-4ac1-a794-f9f667a39ce1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Malaria parasite",
        "uuid" : "9a89e9d6-f6e4-4d14-8841-34df9ece70a5"
      },
      "displayOrder" : 15.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complaint').containsAnyAnswerConceptName('Headache','Fever');\n  return statusBuilder.build();\n};",
      "mandatory" : true
    } ]
  }, {
    "uuid" : "b7c5bb37-2f83-4c7c-97ee-73adb0d698c1",
    "name" : "Urine Microscopy",
    "displayOrder" : 6.0,
    "display" : "Urine Microscopy",
    "formElements" : [ {
      "name" : "Pus Cell",
      "uuid" : "1ea5d161-81fd-4505-8615-147dbcac500e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Pus Cell",
        "uuid" : "0b8bc1f8-43db-4ecb-9677-22709e91681f"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complaint').containsAnyAnswerConceptName('Pain in abdomen','Burning micturition','Fever');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "RBC",
      "uuid" : "6da0e845-49be-4a11-87fd-5153ac059a5e",
      "keyValues" : [ ],
      "concept" : {
        "name" : "RBC",
        "uuid" : "b59c126f-975b-45e6-8dd6-584dd54e25c9"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complaint').containsAnyAnswerConceptName('Pain in abdomen','Burning micturition','Fever');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Epithelial cells",
      "uuid" : "bc393bdc-88c6-4d54-958e-1b26f1f7cc15",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Epithelial cells",
        "uuid" : "0343e35f-afd0-41ce-af93-e69c184b159c"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complaint').containsAnyAnswerConceptName('Pain in abdomen','Burning micturition','Fever');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Cast",
      "uuid" : "4e9360db-df70-4f74-893d-6e1fff171dab",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Cast",
        "uuid" : "a2b6d675-4c70-4f15-a5ad-b8f5273602f9"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complaint').containsAnyAnswerConceptName('Pain in abdomen','Burning micturition','Fever');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Crystel",
      "uuid" : "06db1585-728e-46bc-a200-e2400de648a8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Crystel",
        "uuid" : "14a023d3-bd25-4343-9d93-34d9f88eb4b3"
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('New complaint').containsAnyAnswerConceptName('Pain in abdomen','Burning micturition','Fever');\n  return statusBuilder.build();\n};",
      "mandatory" : false
    } ]
  }, {
    "uuid" : "8ff2c73e-10d1-4905-80cf-e56248f4387a",
    "name" : "Medicines",
    "displayOrder" : 7.0,
    "display" : "Medicines",
    "formElements" : [{
      "name" : "Whether Folic acid given?",
      "uuid" : "08b9633e-2b99-42bc-8da2-a94adddfc8a8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Whether Folic acid given",
        "uuid" : "bf1e5598-594c-4444-94e0-9390f5081e41"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Whether IFA given?",
      "uuid" : "cc1e9af2-78a4-4741-90af-fa0583de2645",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Whether IFA given",
        "uuid" : "5740f87b-8cc6-4927-88a2-44636e8f396c"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Whether Calcium given?",
      "uuid" : "7149281c-7930-45bc-8f01-b3b506744d32",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Whether Calcium given",
        "uuid" : "00de9acc-4ff6-485b-b979-41ff00745d23"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Whether Amala given",
      "uuid" : "678040c4-82d9-4a6f-a7ae-5365b97c2d0f",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Whether Amala given",
        "uuid" : "2a5a3b4d-80c4-4d05-8585-e16966ff0c3e"
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "TT 1",
      "uuid" : "156b7ee3-7458-4753-9416-f2839e8fc8c7",
      "keyValues" : [ ],
      "concept" : {
        "name" : "TT 1",
        "uuid" : "ddeb2311-4a90-4a7c-a698-1cd3db4ff0f3"
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "TT 2",
      "uuid" : "a751f467-257c-4f5f-9576-4c88a51bd4bb",
      "keyValues" : [ ],
      "concept" : {
        "name" : "TT 2",
        "uuid" : "858f66e6-1ed3-4c13-9fdf-08f667b092ba"
      },
      "displayOrder" : 7.0,
      "type" : "SingleSelect",
      "mandatory" : false
    } ]
  }, {
    "uuid" : "fe16a7e6-ea50-4711-b5f3-afdd0e40d3d8",
    "name" : "Next ANC Details",
    "displayOrder" : 8.0,
    "display" : "Next ANC Details",
    "formElements" : [ {
      "name" : "Date of next ANC Visit",
      "uuid" : "c115a146-81b0-4b55-bbc5-f452f9ed4bf8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Date of next ANC Visit",
        "uuid" : "6e50431c-6cb0-495f-9735-dd431c9970ff"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    } ]
  }, {
    "uuid" : "21c53019-cf6b-4adb-bfc7-5390bd77ac00",
    "name" : "Referral Details",
    "displayOrder" : 9.0,
    "display" : "Referral Details",
    "formElements" : [  {
      "name" : "Does woman require referral?",
      "uuid" : "4a19eba6-fcb4-48b5-bb2b-69300fa2c890",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Does woman require referral?",
        "uuid" : "77d122e8-0620-4754-8375-b0cbe329003c"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Place of referral",
      "uuid" : "026e90c6-df56-4847-ae0f-ddf0328deb15",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Place of referral",
        "uuid" : "80fccb06-a62f-43e8-92eb-358bdb600079"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Does woman require referral?').containsAnswerConceptName('Yes');\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Other place of referral",
      "uuid" : "c1676ec1-6366-4f32-8cf3-06ada5abac9d",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other place of referral",
        "uuid" : "d169efa9-49af-4c84-ae09-b1b7296c62da"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Place of referral').containsAnswerConceptName('Other');\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Referral reason",
      "uuid" : "9abf6757-e486-4b53-9684-26333b9ab15a",
      "keyValues" : [ {
        "key" : "ExcludedAnswers",
        "value" : [ "Infection", "Bleeding", "Seizure" ]
      } ],
      "concept" : {
        "name" : "Referral reason",
        "uuid" : "8a56f008-a910-4d6f-b028-a95db330dbf2"
      },
      "displayOrder" : 5.0,
      "type" : "MultiSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Does woman require referral?').containsAnswerConceptName('Yes');\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : true
    }, {
      "name" : "Other referral reason",
      "uuid" : "c696eb67-12ac-4596-a918-f5daebb6acf1",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other referral reason",
        "uuid" : "e048675e-eb86-41c2-a47b-aecfa9a3bb8c"
      },
      "displayOrder" : 6.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Referral reason').containsAnswerConceptName('Other');\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : false
    } ]
  }],
  "decisionRule" : "\"use strict\";\n({params, imports}) => {\n    const programEncounter = params.entity;\n    const decisions = params.decisions;\n    const complicationsBuilder = new imports.rulesConfig.complicationsBuilder({\n        programEncounter: programEncounter,\n        complicationsConcept: \"High Risk Conditions\"\n    });\n    //Height is less than 140 cm\n     complicationsBuilder\n        .addComplication(\"Height is less than 140 cm\")\n        .when.valueInEncounter(\"Height\")\n        .is.lessThan(140);\n    //Weight is less than 35 kg\n     complicationsBuilder\n        .addComplication(\"Weight is less than 35 kg\")\n        .when.valueInEncounter(\"Weight\")\n        .is.lessThan(35);\n    //High Blood Pressure\n     complicationsBuilder\n        .addComplication(\"High Blood Pressure\")\n        .when.valueInEncounter(\"Blood Pressure (Diastolic)\")\n        .is.greaterThanOrEqualTo(90)\n        .or.when.valueInEncounter(\"Blood Pressure (systolic)\")\n        .is.greaterThanOrEqualTo(140);\n    complicationsBuilder\n        .addComplication(\"Oedema\")\n        .when.valueInEncounter(\"Oedema\")\n        .containsAnyAnswerConceptName(\"Face\",\"Vulval\",\"Entire body\");\n    complicationsBuilder\n        .addComplication(\"Hydroamniosis\")\n        .when.valueInEncounter(\"Abdomen check\")\n        .containsAnswerConceptName(\"Hydroamniosis\");\n  complicationsBuilder\n        .addComplication(\"Twins\")\n        .when.valueInEncounter(\"Abdomen check\")\n        .containsAnswerConceptName(\"Twins\");\n        //Foetal Position\n  complicationsBuilder\n        .addComplication(\"Foetal Position is not normal\")\n        .when.valueInEncounter(\"Position\")\n        .containsAnswerConceptName(\"Transverse\",\"Breach\");\n      //FHS - Not Audible\n    complicationsBuilder\n        .addComplication(\"FHS - Not Audible\")\n        .when.valueInEncounter(\"FHS\")\n        .containsAnswerConceptName(\"Not audible/Can't locate\");\n     complicationsBuilder\n        .addComplication(\"No foetal movement\")\n        .when.valueInEncounter(\"Foetus movement\")\n        .containsAnyAnswerConceptName(\"No foetal movement\");\n     \n        \n    complicationsBuilder\n        .addComplication(\"Urine Albumin Present\")\n        .when.valueInEncounter(\"Urine Albumin\")\n        .containsAnyAnswerConceptName(\"1+\",\"2+\",\"3+\",\"4+\");\n    complicationsBuilder\n        .addComplication(\"Urine sugar present\")\n        .when.valueInEncounter(\"Urine sugar\")\n        .containsAnyAnswerConceptName(\"1+\",\"2+\",\"3+\",\"4+\");\n    complicationsBuilder\n        .addComplication(\"Low Haemoglobin\")\n        .when.valueInEncounter(\"Hb\")\n        .is.lessThan(7);\n        \n     complicationsBuilder\n        .addComplication(\"Bleeding PV\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Bleeding PV\");\n     complicationsBuilder\n        .addComplication(\"Breathing difficulty\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Breathing difficulty\");\n     complicationsBuilder\n        .addComplication(\"Fetus is not moving\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Fetus is not moving\");\n     complicationsBuilder\n        .addComplication(\"Headache\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Headache\");\n     complicationsBuilder\n        .addComplication(\"Pain in abdomen\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Pain in abdomen\");\n     complicationsBuilder\n        .addComplication(\"Swelling on face/vulva/abdomen/whole body\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Swelling on face/vulva/abdomen/whole body\");\n     complicationsBuilder\n        .addComplication(\"Burning micturition\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Burning micturition\");\n     complicationsBuilder\n        .addComplication(\"Fever\")\n        .when.valueInEncounter(\"New complaint\")\n        .containsAnswerConceptName(\"Fever\");\n        \n    const gestationalAgeInWeeks = ruleServiceLibraryInterfaceForSharingModules.motherCalculations.gestationalAgeAsOn(programEncounter.encounterDateTime,programEncounter.programEnrolment);    \n      \n      console.log('gestationalAgeInWeeks',gestationalAgeInWeeks);\n      \n    complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"12-14\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(12,13,14);\n \n  complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"14-16\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(14,15,16);\n \n  complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"16-18\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(16,17,18);\n        \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"18-20\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(18,19,20);\n        \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"20-22\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(20,21,22);\n \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"22-24\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(22,23,24);\n \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"24-26\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(24,25,26);\n \n  complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"26-28\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(26,27,28);\n \n  complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"28-30\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(28,29,30);\n \n  complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"30-32\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(30,31,32);\n \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"32-34\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(32,33,34);\n \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"34-36\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(34,35,36);\n \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"36-38\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(36,37,38);\n \n complicationsBuilder\n        .addComplication(\"Fundle Height doesn't correspond to the gestational week\")\n        .when.valueInEncounter(\"Fundle Height\")\n        .containsAnswerConceptName(\"38-40\").and.whenItem(gestationalAgeInWeeks).not.equalsOneOf(38,39,40);\n \n        \n        \n    decisions.encounterDecisions.push(complicationsBuilder.getComplications());\n    return decisions;\n};",
  "visitScheduleRule" : "\"use strict\";\n({ params, imports }) => {\n  const programEncounter = params.entity;\n  const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n    programEncounter\n  });\n  \nconst ifReferral = programEncounter.getObservationReadableValue('Does woman require referral?');\nconsole.log('ifReferral',ifReferral);\nconst edd = programEncounter.programEnrolment.getObservationValue('EDD');\nconsole.log('edd',edd);\nconst nextANCDate = programEncounter.getObservationValue('Date of next ANC Visit');\nconsole.log('nextANCDate',nextANCDate);\nconst labEarliestDate =imports.moment(programEncounter.encounterDateTime).add(4,'days').toDate();\nconsole.log('labEarliestDate',labEarliestDate);\n\n           //Lab Investigations \nif((programEncounter.programEnrolment.hasEncounter('Lab Investigations', 'Lab Investigations')) === false){\n    scheduleBuilder\n   .add({\n      name: \"Lab Investigations\",\n      encounterType: \"Lab Investigations\",\n      earliestDate: labEarliestDate,\n      maxDate: imports.moment(labEarliestDate).add(8, 'days').toDate()\n    }); \n    \n }\n \n \nif(imports.moment(edd).isSameOrBefore(imports.moment(nextANCDate), 'date')){\nif((programEncounter.programEnrolment.hasEncounter('Delivery', 'Delivery')) === false)\n scheduleBuilder\n    .add({\n      name: \"Delivery\",\n      encounterType: \"Delivery\",\n      earliestDate: imports.moment(edd).toDate(),\n      maxDate: imports.moment(edd).add(0, 'days').toDate()\n    });\n    }\nelse{\n  scheduleBuilder\n    .add({\n      name: \"ANC Clinic Visit\",\n      encounterType: \"ANC Clinic Visit\",\n      earliestDate: imports.moment(nextANCDate).toDate(),\n      maxDate: imports.moment(nextANCDate).add(8, 'days').toDate()\n    }).whenItem(!_.isEmpty(nextANCDate))\n    .is.not.truthy;\n    }\n  \n    \n    scheduleBuilder\n    .add({\n      name: \"Referral Status-1\",\n      encounterType: \"Referral Status\",\n      earliestDate: imports.moment(programEncounter.encounterDateTime).add(3, 'days').toDate(),\n      maxDate: imports.moment(programEncounter.encounterDateTime).add(5, 'days').toDate()\n    }).whenItem(ifReferral == 'Yes')\n    .is.truthy;\n    \n\n    \n  return scheduleBuilder.getAll();\n};",
  "validationRule" : "",
  "checklistsRule" : ""
}