{
  "name" : "Child Birth Form",
  "uuid" : "f02c318b-9396-43b2-85cf-b9f723180840",
  "formType" : "ProgramEncounter",
  "formElementGroups" : [ {
    "uuid" : "924fcbfe-4d70-454e-9acd-c1dc9c08d099",
    "name" : "General",
    "displayOrder" : 1.0,
    "display" : "General",
    "formElements" : [ {
      "name" : "Birth Weight",
      "uuid" : "58d2d130-c177-4020-958f-adea4b4d60bf",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Birth Weight",
        "uuid" : "24a9549b-05fc-4899-b861-b5c0e54b7340"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Whether baby cleaned and dried immediately after birth",
      "uuid" : "c56bcb8a-ee84-4dbb-8dfd-97eeb1487545",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Whether baby cleaned and dried immediately after birth",
        "uuid" : "7cecaf08-1a00-41a6-965b-015b89aa66ba"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Whether baby wrapped in warm clothes",
      "uuid" : "a096867b-4fea-4813-b0c3-61c9d7407e6a",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Whether baby wrapped in warm clothes",
        "uuid" : "cdd45c89-b7be-4131-a6c0-48e8b82926c4"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Diagnosis of baby immediately after birth",
      "uuid" : "20f25b27-ecdc-4fbe-821f-9cd9be598691",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Diagnosis of baby immediately after birth",
        "uuid" : "734e9cd5-3df4-4cfd-bca4-aa842af2c84e"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "mandatory" : false
    } ]
  }, {
    "uuid" : "7b8d2606-900c-497a-9577-d63cd2307d29",
    "name" : "Newborn observations within 30 seconds",
    "displayOrder" : 2.0,
    "display" : "Newborn observations within 30 seconds",
    "formElements" : [ {
      "name" : "Newborn cry",
      "uuid" : "e31d2514-3369-4235-9944-26e7ce071da6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Newborn cry",
        "uuid" : "426f1fbd-6211-47dc-9b58-05a94d8dd713"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Newborn breathing",
      "uuid" : "e74bd16c-7d6f-46dc-80cc-39cef510b5e4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Newborn breathing",
        "uuid" : "63495af0-0150-48a0-b52d-9656a8671f1b"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "Newborn movement",
      "uuid" : "67945e98-5e9d-44b6-bc32-15a10936f2da",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Newborn movement",
        "uuid" : "5b885356-ac8a-4e5c-bc6d-32ac05079d62"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "mandatory" : false
    }, {
      "name" : "If baby was not breathing for 30 seconds, was any action taken",
      "uuid" : "f8a9a854-86bf-4900-a08a-4f18f3777461",
      "keyValues" : [ ],
      "concept" : {
        "name" : "If baby was not breathing for 30 seconds, was any action taken",
        "uuid" : "e2282953-329a-400f-aa12-7b1065a42f7a"
      },
      "displayOrder" : 4.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('Newborn cry').containsAnyAnswerConceptName(\"Did not cry\",\"Weak cry\").or.when.valueInEncounter('Newborn breathing').containsAnyAnswerConceptName(\"Did not breath\",\"Gasping\");\n  return statusBuilder.build();\n};\n",
      "mandatory" : false
    }, {
      "name" : "If baby was not breathing for 30 seconds, was any action taken?",
      "uuid" : "ec3b0daa-9b50-470a-bd9a-dba39ff65457",
      "keyValues" : [ ],
      "concept" : {
        "name" : "If baby was not breathing for 30 seconds, was any action taken?",
        "uuid" : "3b236506-33ee-4f91-9d72-ec11840fb131"
      },
      "displayOrder" : 5.0,
      "type" : "SingleSelect",
      "mandatory" : false,
      "voided" : true
    } ]
  }, {
    "uuid" : "cab86429-00cf-4d38-a7c6-f516beb19e23",
    "name" : "Details",
    "displayOrder" : 3.0,
    "display" : "Details",
    "formElements" : [ {
      "name" : "If baby was not breathing for 30 seconds, was any action taken",
      "uuid" : "1b856c69-51c5-4dcb-8bc4-0a5f3c44d619",
      "keyValues" : [ ],
      "concept" : {
        "name" : "If baby was not breathing for 30 seconds, was any action taken",
        "uuid" : "e2282953-329a-400f-aa12-7b1065a42f7a"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : false,
      "voided" : true
    }, {
      "name" : "Whether mucus extractor used",
      "uuid" : "94f55467-051a-448f-b935-56a03e127e00",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Whether mucus extractor used",
        "uuid" : "a11eea1e-4529-4bf1-a8b2-734e38a590bb"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "",
      "mandatory" : false
    }, {
      "name" : "What was the outcome of action",
      "uuid" : "07f9f7dc-84b7-4888-a132-ea5aacd546ed",
      "keyValues" : [ ],
      "concept" : {
        "name" : "What was the outcome of action",
        "uuid" : "62fa4db7-448a-48fe-b5d4-5feb00752153"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\nconst programEncounter = params.entity;\nconst formElement = params.formElement;\n\nconst statusBuilder = new imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n\nstatusBuilder.show().when.valueInEncounter('Whether mucus extractor used').containsAnswerConceptName('Yes');\n\n  return statusBuilder.build();\n};",
      "mandatory" : true
    } ]
  }, {
    "uuid" : "74ed830f-5110-4224-8d47-f8708b97061c",
    "name" : "Newborn observations after 5 mins",
    "displayOrder" : 4.0,
    "display" : "Newborn observations after 5 mins ",
    "formElements" : [ {
      "name" : "Newborn cry",
      "uuid" : "fef0aee4-13d0-4dbd-aef4-60ccc0b53dc4",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Newborn cried",
        "uuid" : "e4d30772-e360-4824-9acb-e417bb5b264e"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  \n  const isMucusExtractorUsed = programEncounter.getObservationReadableValue('Whether mucus extractor used');\n  \n  if(_.isEqual(isMucusExtractorUsed,'Yes'))\n    statusBuilder.show().when.valueInEncounter('What was the outcome of action').containsAnswerConceptNameOtherThan(\"Baby died\");\n  else statusBuilder.show().when.valueInEncounter('Diagnosis of baby immediately after birth').containsAnswerConceptNameOtherThan(\"Still birth\");\n  \n  return statusBuilder.build();\n};\n",
      "mandatory" : false
    }, {
      "name" : "Newborn breathing",
      "uuid" : "2f1bea58-9e11-46b8-8c66-eb604e5626c0",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Newborn breath",
        "uuid" : "f23c5d63-f73c-40e7-a4d0-9ebecf2a701c"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('What was the outcome of action').containsAnswerConceptName(\"Baby is alive\").or.when.valueInEncounter('Diagnosis of baby immediately after birth').containsAnswerConceptNameOtherThan(\"Still birth\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    }, {
      "name" : "Newborn movement",
      "uuid" : "2a2a4334-e67b-4c4e-bc72-f848085e41f8",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Newborn movements",
        "uuid" : "0c06c507-6676-4083-a862-2b0d80327262"
      },
      "displayOrder" : 3.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new\n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().when.valueInEncounter('What was the outcome of action').containsAnswerConceptName(\"Baby is alive\").or.when.valueInEncounter('Diagnosis of baby immediately after birth').containsAnswerConceptNameOtherThan(\"Still birth\");\n  return statusBuilder.build();\n};",
      "mandatory" : false
    } ]
  } ],
  "decisionRule" : "",
  "visitScheduleRule" : "\"use strict\";\n({ params, imports }) => {\n  const programEncounter = params.entity;\n  const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n    programEncounter\n  });\n const dateOfBirth = programEncounter.individual.dateOfBirth;\n const visitDate = programEncounter.encounterDateTime; \n //let deathStatus = 'NA';\n let deathStatus = '';\n let diagnosisAfterBirth = '';\n \n deathStatus= programEncounter.getObservationReadableValue('What was the outcome of action');\n diagnosisAfterBirth= programEncounter.getObservationReadableValue('Diagnosis of baby immediately after birth');\n \n console.log('====>',deathStatus);\n console.log('====>',diagnosisAfterBirth);\n\n \n  let isAlive = true;\n  if((deathStatus && _.isEqual(deathStatus, 'Baby died') ) || (diagnosisAfterBirth && _.isEqual(diagnosisAfterBirth, 'Still birth')) )\n  isAlive = false;\n  \n//  if(_.isEqual(deathStatus, 'Baby died') || _.isEqual(diagnosisAfterBirth, 'Still birth')\n  //    isAlive = false;\n  \n  const encounterSchedulePNC = [\n    {\"name\": \"PNC 1\", \"earliest\": 0, \"max\": 2},\n    {\"name\": \"PNC 2\", \"earliest\": 3, \"max\": 6},\n    {\"name\": \"PNC 3\", \"earliest\": 7, \"max\": 10},\n    {\"name\": \"PNC 4\", \"earliest\": 15, \"max\": 18},\n    {\"name\": \"PNC 5\", \"earliest\": 28, \"max\": 31},\n    {\"name\": \"PNC 6\", \"earliest\": 42, \"max\": 45}\n];\n  \n \n if(isAlive && programEncounter.programEnrolment.hasEncounterOfType('Child PNC') === false){\n    var schedule = _.chain(encounterSchedulePNC).filter(e => imports.moment(visitDate).isSameOrBefore(imports.moment(dateOfBirth).add(e.earliest, 'days'), 'date') === true)\n            .filter(e => (programEncounter.programEnrolment.hasEncounter('Child PNC', e.name)) === false)\n            .first()\n            .value();\n  \n  if (!_.isEmpty(schedule)) {\n  scheduleBuilder\n    .add({\n      name: schedule.name,\n      encounterType: \"Child PNC\",\n      earliestDate:  imports.moment(dateOfBirth).add(schedule.earliest, 'days').toDate() ,\n      maxDate: imports.moment(dateOfBirth).add(schedule.max, 'days').toDate() \n    });\n   }\n}\n \n   \n        \n  return scheduleBuilder.getAll();\n};",
  "validationRule" : "",
  "checklistsRule" : ""
}