{
  "name" : "Program Encounter Cancellation Form",
  "uuid" : "8ffd8274-ca88-449f-857d-9638b7db792f",
  "formType" : "ProgramEncounterCancellation",
  "formElementGroups" : [ {
    "uuid" : "1df32d74-55ac-4408-80eb-dd86810024f4",
    "name" : "Cancel Details",
    "displayOrder" : 1.0,
    "display" : "Cancel Details",
    "formElements" : [ {
      "name" : "Cancel reason",
      "uuid" : "68d5d3c8-24b4-4809-a533-2e0523651fcc",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Visit cancel reason",
        "uuid" : "bf400e7f-8e1b-4052-af49-b0db47b3eb5a"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "mandatory" : true
    }, {
      "name" : "Other reason",
      "uuid" : "87e15687-d5bb-4dce-8496-eb56533881cd",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Other reason for cancelling",
        "uuid" : "d038a9c4-fe96-4c09-b883-c80691427b60"
      },
      "displayOrder" : 2.0,
      "type" : "SingleSelect",
      "mandatory" : true
    } ]
  }, {
    "uuid" : "c97eb2c6-59e8-4065-9eff-cf6e337c8ebf",
    "name" : "Next ANC Visit Details",
    "displayOrder" : 2.0,
    "display" : "Next ANC Visit Details",
    "formElements" : [ {
      "name" : "Date of next ANC Visit",
      "uuid" : "8544be65-6c70-426d-b0d0-474f9340fad6",
      "keyValues" : [ ],
      "concept" : {
        "name" : "Date of next ANC Visit",
        "uuid" : "6e50431c-6cb0-495f-9735-dd431c9970ff"
      },
      "displayOrder" : 1.0,
      "type" : "SingleSelect",
      "rule" : "'use strict';\n({params, imports}) => {\n  const programEncounter = params.entity;\n  const formElement = params.formElement;\n  const statusBuilder = new \n  imports.rulesConfig.FormElementStatusBuilder({programEncounter, formElement});\n  statusBuilder.show().whenItem(programEncounter.encounterType.name == 'ANC Clinic Visit' || programEncounter.encounterType.name == 'ANC Home Visit').is.truthy;\n  \nreturn statusBuilder.build();\n};",
      "mandatory" : true
    } ]
  } ],
  "decisionRule" : "",
  "visitScheduleRule" : "\"use strict\";\n({ params, imports }) => {\n  const programEncounter = params.entity;\n  const scheduleBuilder = new imports.rulesConfig.VisitScheduleBuilder({\n    programEncounter\n  });\n  \n  \n  \n  console.log('programEncounter.encounterType.name',programEncounter.encounterType.name);\n  const hasExitedProgram = programEncounter => programEncounter.programEnrolment.programExitDateTime;\n\n if (!hasExitedProgram(programEncounter)) {\n            if(programEncounter.encounterType.name == 'ANC Clinic Visit') {\n          \n                const nextANCDate = programEncounter.findCancelEncounterObservation('Date of next ANC Visit').getReadableValue();\n                const edd = programEncounter.programEnrolment.getObservationValue('EDD');\n                const visitDate = programEncounter.earliestVisitDateTime || programEncounter.encounterDateTime; \n                \n                //console.log('visitDate',visitDate);             \n                //console.log('nextANCDate',nextANCDate);\n                //console.log('edd',edd);\n                //console.log('edd',imports.moment(edd).isSameOrBefore(imports.moment(nextANCDate), 'date'));\n \n                if(imports.moment(edd).isSameOrBefore(imports.moment(nextANCDate), 'date')){\n                if((programEncounter.programEnrolment.hasEncounter('Delivery', 'Delivery')) === false)\n                   scheduleBuilder\n                                  .add({\n                                  name: \"Delivery\",\n                                  encounterType: \"Delivery\",\n                                  earliestDate: imports.moment(edd).toDate(),\n                                  maxDate: imports.moment(edd).add(0, 'days').toDate()\n                                  });\n                  }else{\n                    scheduleBuilder\n                                  .add({\n                                  name: \"ANC Clinic Visit\",\n                                  encounterType: \"ANC Clinic Visit\",\n                                  earliestDate: imports.moment(nextANCDate).toDate(),\n                                  maxDate: imports.moment(nextANCDate).add(8, 'days').toDate()\n                                  }).whenItem(!_.isEmpty(nextANCDate))\n                                  .is.not.truthy;\n    \n                    scheduleBuilder\n                                  .add({\n                                  name: \"ANC Home Visit\",\n                                  encounterType: \"ANC Home Visit\",\n                                  earliestDate: imports.moment(visitDate).toDate(),\n                                  maxDate: imports.moment(visitDate).add(8, 'days').toDate()\n                                  }).whenItem(!_.isEmpty(visitDate))\n                                  .is.not.truthy;\n                        }\n         }\n         \n         if(programEncounter.encounterType.name == 'ANC Home Visit') {  \n           const nextANCDate = programEncounter.findCancelEncounterObservation('Date of next ANC Visit').getReadableValue();\n           const edd = programEncounter.programEnrolment.getObservationValue('EDD');\n \n            if(imports.moment(edd).isSameOrBefore(imports.moment(nextANCDate), 'date')){\n            if((programEncounter.programEnrolment.hasEncounter('Delivery', 'Delivery')) === false)\n             scheduleBuilder\n                          .add({\n                            name: \"Delivery\",\n                            encounterType: \"Delivery\",\n                            earliestDate: imports.moment(edd).toDate(),\n                            maxDate: imports.moment(edd).add(0, 'days').toDate()\n                            });\n            }else{ \n              scheduleBuilder\n                          .add({\n                          name: \"ANC Home Visit\",\n                          encounterType: \"ANC Home Visit\",\n                          earliestDate: imports.moment(nextANCDate).toDate(),\n                          maxDate: imports.moment(nextANCDate).add(8, 'days').toDate()\n                          }).whenItem(!_.isEmpty(nextANCDate))\n                          .is.not.truthy;\n                          }\n              }\n              \n     if(programEncounter.encounterType.name == 'Abortion followup') {  \n           const visitDate = programEncounter.encounterDateTime || programEncounter.earliestVisitDateTime; \n            console.log('visitDate',visitDate);\n           \n           const dateOfAbortion = programEncounter.programEnrolment\n        .getObservationReadableValueInEntireEnrolment('Date and time of abortion');                          \n           console.log('dateOfAbortion',dateOfAbortion);\n           \n           const encounterScheduleAbortion = [\n                    {\"name\": \"Abortion followup-2\", \"earliest\": 7, \"max\": 11 },\n                    {\"name\": \"Abortion followup-3\", \"earliest\": 15, \"max\": 19}    \n          ];\n   \n           var schedule = _.chain(encounterScheduleAbortion).filter(e => imports.moment(visitDate).isSameOrBefore(imports.moment(dateOfAbortion).add(e.earliest, 'days'), 'date') === true).filter(e => (programEncounter.programEnrolment.hasEncounter('Abortion followup', e.name)) === false).first().value();\n  \n            console.log('schedule',schedule);\n            if (!_.isEmpty(schedule)) {\n                scheduleBuilder\n                          .add({\n                    name: schedule.name,\n                    encounterType: \"Abortion followup\",\n                    earliestDate:  imports.moment(dateOfAbortion).add(schedule.earliest, 'days').toDate() ,\n                    maxDate: imports.moment(dateOfAbortion).add(schedule.max, 'days').toDate() \n                  });\n          }\n      }\n      \n       if(programEncounter.encounterType.name == 'Mother PNC') { \n           const visitDate = programEncounter.encounterDateTime || programEncounter.earliestVisitDateTime; \n         \n           const dateOfDelivery =  programEncounter.programEnrolment\n        .getObservationReadableValueInEntireEnrolment('Date and time when placenta was out');  \n        \n           const encounterSchedulePNC = [\n              {\"name\": \"PNC 2\", \"earliest\": 3, \"max\": 6},\n              {\"name\": \"PNC 3\", \"earliest\": 7, \"max\": 10},\n              {\"name\": \"PNC 4\", \"earliest\": 15, \"max\": 18},\n              {\"name\": \"PNC 5\", \"earliest\": 28, \"max\": 31},\n              {\"name\": \"PNC 5\", \"earliest\": 42, \"max\": 45}\n            ];\n            \n          var schedule = _.chain(encounterSchedulePNC).filter(e => imports.moment(visitDate).isSameOrBefore(imports.moment(dateOfDelivery).add(e.earliest, 'days'), 'date') === true).filter(e => (programEncounter.programEnrolment.hasEncounter('Mother PNC', e.name)) === false)         .first().value();\n  \n          if (!_.isEmpty(schedule)) {\n                scheduleBuilder\n                          .add({\n                        name: schedule.name,\n                        encounterType: \"Mother PNC\",\n                        earliestDate:  imports.moment(dateOfDelivery).add(schedule.earliest, 'days').toDate() ,\n                        maxDate: imports.moment(dateOfDelivery).add(schedule.max, 'days').toDate() \n                    });\n          }\n       }\n       \n        if(programEncounter.encounterType.name == 'Child PNC') { \n           const visitDate = programEncounter.encounterDateTime || programEncounter.earliestVisitDateTime; \n         \n          const dateOfBirth = programEncounter.individual.dateOfBirth;\nconsole.log(\"=======>dateof birteh\",dateOfBirth);\n          const encounterSchedulePNC = [\n            {\"name\": \"PNC 2\", \"earliest\": 3, \"max\": 6},\n            {\"name\": \"PNC 3\", \"earliest\": 7, \"max\": 10},\n            {\"name\": \"PNC 4\", \"earliest\": 15, \"max\": 18},\n            {\"name\": \"PNC 5\", \"earliest\": 28, \"max\": 31},\n            {\"name\": \"PNC 6\", \"earliest\": 42, \"max\": 45}\n          ];\n            \n          var schedule = _.chain(encounterSchedulePNC).filter(e => imports.moment(visitDate).isSameOrBefore(imports.moment(dateOfBirth).add(e.earliest, 'days'), 'date') === true).filter(e => (programEncounter.programEnrolment.hasEncounter('Child PNC', e.name)) === false)         .first().value();\n  \n          if (!_.isEmpty(schedule)) {\n                scheduleBuilder\n                          .add({\n                        name: schedule.name,\n                        encounterType: \"Child PNC\",\n                        earliestDate:  imports.moment(dateOfBirth).add(schedule.earliest, 'days').toDate() ,\n                        maxDate: imports.moment(dateOfBirth).add(schedule.max, 'days').toDate() \n                    });\n          }\n       }\n       \n       if(programEncounter.encounterType.name == 'Referral Status') { \n        const visitDate = programEncounter.encounterDateTime || programEncounter.earliestVisitDateTime; \n         \n       const followupDate = imports.moment(visitDate).add(4, 'days').toDate();\n        scheduleBuilder\n                  .add({\n                  name: \"Referral Status-2\",\n                  encounterType: \"Referral Status\",\n                  earliestDate: followupDate,\n                  maxDate: imports.moment(followupDate).add(2, 'days').toDate()\n                }).whenItem(programEncounter.name == 'Referral Status-1')\n                .is.truthy;\n       }\n    }\n  \n  return scheduleBuilder.getAll();\n};",
  "validationRule" : "",
  "checklistsRule" : ""
}